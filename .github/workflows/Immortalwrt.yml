#
# 请大家记住拉取的是我的 281677160/build-actions 仓库，拉取的是其他仓库有问题，别问我，我也不清楚什么问题
#
# 因为SSH连接配置固件直接编译，会给github停止编译的,所以要另外触发启动编译程序
#
# 一般情况下都能触发启动编译的，除非没设置好密匙，或者密匙过期了，或者密匙错误之类的
#
# REPO_TOKEN密匙制作教程：https://git.io/jm.md
#
#

name: Immortalwrt-天灵
on:
  workflow_dispatch:
    inputs:
      REPO_BRANCH:
        description: '天灵源码-请选择分支'
        required: true
        default: 'master'
        type: choice
        options:
          - 'openwrt-24.10'
          - 'openwrt-23.05'
          - 'master'
      CONFIG_FILE:
        description: '请选择[seed文件夹内]的配置文件'
        required: true
        default: 'x86_64'
        type: choice
        options:
          - 'x86_64'
          - 'armsr_rootfs_tar_gz'
      INFORMATION_NOTICE:
        description: 'Telegram或pushplus信息通知'
        required: true
        default: '关闭'
        type: choice
        options:
          - '关闭'
          - 'Telegram'
          - 'Pushplus'
      KEEP_WORKFLOWS:
        description: '清理workflows,保留[X]个runs不被清理'
        required: true
        default: '30'
      KEEP_RELEASES:
        description: '清理Releases,保留[X]个Releases不被清理'
        required: true
        default: '30'
      SSH_ACTION:
        description: 'SSH远程配置固件'
        required: false
        default: 'false'
        type: boolean
      UPLOAD_FIRMWARE:
        description: '上传固件到 Github Artifacts'
        required: false
        default: 'true'
        type: boolean
      UPLOAD_RELEASE:
        description: '发布固件到 Github Releases'
        required: false
        default: 'true'
        type: boolean
      CACHEWRTBUILD_SWITCH:
        description: '缓存加速编译'
        required: false
        default: 'true'
        type: boolean
      UPDATE_FIRMWARE_ONLINE:
        description: '在线更新固/打包aarch64系列为img固件'
        required: false
        default: 'true'
        type: boolean


# 如若启动定时编译的话,配置文件是设置对应文件夹内的settings.ini文件
# 定时触发开启开始编译(把下面两个#去掉开启,时间设置请看定时开启编译说明)
  schedule:
     - cron: 0 19 1,4,5,7,9,11,14,15,17,19,21,24,25,27,29,31 * *
env:
  GIT_REPOSITORY: ${{github.repository}}
  REPO_TOKEN: ${{ secrets.REPO_TOKEN }}
  PUSH_PLUS_TOKEN: ${{ secrets.PUSH_PLUS_TOKEN }}
  TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
  TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
  TZ: Asia/Shanghai

jobs:
  build:
    name: 启动"${{ matrix.target }}-${{ github.event.inputs.REPO_BRANCH }}"触发编译
    runs-on: ubuntu-22.04
    if: ${{ github.event.repository.owner.id }} == ${{ github.event.sender.id }}
    
    env:
      FOLDER_NAME: ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        target: [Immortalwrt]
        
        # 请勿对 target: [Immortalwrt] 做任何修改
        
    steps:
      # 1. 记录编译开始时间（直接使用全局 TZ）
    - name: 记录编译开始时间
      run: |
        echo "COMPILE_START=$(date +%s)" >> $GITHUB_ENV
        echo "START_TIME_DISPLAY=$(date +'%Y年%m月%d号%H时%M分')" >> $GITHUB_ENV
        
    - name: 准备结束
      uses: actions/checkout@v4
      
    - name: 检测密匙/文件/版本
      uses: 281677160/common@mishi

    - name: 部署编译环境
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt-get -qq update -y
        sudo -E apt-get -qq install -y gawk git gettext libssl-dev xsltproc zip git-core wget curl grep python2.7 python3 python3-pip libpython3-dev snapd
        sudo snap install jq
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /${{ env.DIY_WORK }}
        sudo chown $USER:$GROUPS /${{ env.DIY_WORK }}
    
    - name: 下载"${{ matrix.target }}-${{ inputs.REPO_BRANCH }}"源码
      working-directory: /${{ env.DIY_WORK }}
      run: |
        git clone -q -b "${REPO_BRANCH}" --single-branch "${REPO_URL}" openwrt
        ln -sf /${{ env.DIY_WORK }}/openwrt ${GITHUB_WORKSPACE}/openwrt
        bash ${{ env.COMMON_SH }} Diy_feedsconf
        echo "SHANG_CHUAN=true" >> ${GITHUB_ENV}
    
    - name: 公告
      continue-on-error: true
      uses: 281677160/common@message
 
    - name: 运行其他和SSH远程(make menuconfig)
      id: info
      uses: 281677160/common@need
        
    - name: 编译信息
      continue-on-error: true
      if: env.COMPILATION_INFORMATION == 'true'
      uses: 281677160/common@message
    
    - name: 清理releases和workflows
      continue-on-error: true
      uses: danshui-git/delete-releases-workflows@main
      with:
        delete_releases: true
        prerelease_option: all
        releases_keep_keyword: targz/Update
        releases_keep_latest: ${{ env.KEEP_RELEASES }}
        delete_tags: true
        max_releases_fetch: 300
        delete_workflows: true
        workflows_keep_latest: ${{ env.KEEP_WORKFLOWS }}
        max_workflows_fetch: 300
        repo: ${{ github.repository }}
        gh_token: ${{ secrets.REPO_TOKEN }}
        
    - name: 触发启动"${{ matrix.target }}"开始编译
      if: steps.info.outcome == 'success'
      uses: 281677160/common@trigger

    - name: 提取内核版本（直接使用现成环境变量）
      if: always()
      run: |
        # 优先使用明确的 LINUX_KERNEL 变量（日志中已显示该值为 6.12）
        if [ -n "${{ env.LINUX_KERNEL }}" ]; then
          KERNEL_VERSION="${{ env.LINUX_KERNEL }}"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "已从环境变量 LINUX_KERNEL 提取内核版本: $KERNEL_VERSION"
          exit 0
        fi

        # 备选：使用 patchverl 变量（日志中该值也为 6.12）
        elif [ -n "${{ env.patchverl }}" ]; then
          KERNEL_VERSION="${{ env.patchverl }}"
          echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
          echo "已从环境变量 patchverl 提取内核版本: $KERNEL_VERSION"
          exit 0
        fi

        # 兜底：若上述变量意外缺失，显示未知
        else
          echo "KERNEL_VERSION=未知" >> $GITHUB_ENV
          echo "未找到内核版本相关环境变量"
        fi

    - name: 计算编译时长
      if: always()  # 无论编译成功/失败都执行
      run: |
        # 读取开始时间戳（从环境变量读入 Shell 变量）
        local_start=$COMPILE_START
        # 直接获取当前结束时间戳（Shell 命令）
        local_end=$(date +%s)
        
        if [ $local_end -ge $local_start ]; then
          duration=$((local_end - local_start))
        else
          # 跨天场景处理（如 23:50 开始 → 00:10 结束）
          duration=$(( (86400 - local_start) + local_end ))
        fi
    
        hours=$((duration / 3600))
        minutes=$(( (duration % 3600) / 60 ))
        seconds=$((duration % 60))
        echo "DURATION=${hours}小时${minutes}分钟${seconds}秒" >> $GITHUB_ENV

        echo "FINISH_TIME=$(date +'%Y年%m月%d号%H时%M分')" >> $GITHUB_ENV
        
    #- name: 触发编译通知
      #uses: emon100/Action-Serverchan@v3
      #with:
        #SCKEY: ${{ secrets.WEIXIN_SCKEY }}
        ## key: ${{ secrets.WEIXIN_SCKEY }}
        #text: 开始编译【${{matrix.target}}】
        #desp: 🎉 主人💕：您的编译脚本成功触发【${{matrix.target}}】文件夹编译【${{ env.SOURCE_CODE }}】【${{ env.FOLDER_NAME }}】【${{ env.CONFIG_FILE }}】分支的${{env.TARGET_PROFILE}}固件中,请耐心等待......

          #😋【${{env.WAREHOUSE_MAN}}】仓库的【${{env.RUN_NUMBER}}号】

          #🎈 完成时间：${{ env.FINISH_TIME }}

          #🌴 固件编译已触发 🎈！！！
  #🎈 完成时间：${{ env.FINISH_TIME }}
  #🎈 触发时间：${{ format('{0:yyyy年MM月dd号HH时mm分}', github.event.head_commit.timestamp) }}

      # 4. 成功通知（使用精确计算的时长）
    - name: 编译成功通知
      if: success() && steps.compile.outcome == 'success'
      uses: emon100/Action-Serverchan@v3
      with:
        SCKEY: ${{ secrets.WEIXIN_SCKEY }}
        text: 编译触发【${{matrix.target}}】
        desp: |
          🎉 主人💕：【${{matrix.target}}】文件夹成功触发编译！
          📦 编译目标：【${{ env.SOURCE_CODE }}】【${{ env.FOLDER_NAME }}】【${{ env.CONFIG_FILE }}】分支的${{env.TARGET_PROFILE}}固件,请耐心等待......
          🧮 内核版本：${{ env.KERNEL_VERSION }}
          ⏱️ 定制编译时长：${{ env.DURATION }}
          🕒 开始时间：${{ env.START_TIME_DISPLAY }}
          🎈 完成时间：${{ env.FINISH_TIME }}
          🌴 编译已成功触发 🎈！！！

    # 5. 失败通知（同样使用精确时长）
    - name: 编译触发失败通知
      if: failure() && steps.compile.outcome == 'failure'
      uses: emon100/Action-Serverchan@v3
      with:
        SCKEY: ${{ secrets.WEIXIN_SCKEY }}
        text: 编译失败【${{matrix.target}}】
        desp: |
          🚨 主人💕：【${{matrix.target}}】文件夹触发编译失败！
          ❌ 失败目标：【${{ env.SOURCE_CODE }}】【${{ env.FOLDER_NAME }}】【${{ env.CONFIG_FILE }}】分支的${{env.TARGET_PROFILE}}固件
          🧮 内核版本：${{ env.KERNEL_VERSION }}
          😋 仓库信息：【${{env.WAREHOUSE_MAN}}】仓库的【${{env.RUN_NUMBER}}号】
          ⏱️ 失败时已耗时：${{ env.DURATION }}
          🕒 开始时间：${{ env.START_TIME_DISPLAY }}
          🎈 失败时间：${{ env.FINISH_TIME }}
          🔗 查看详情：${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          🌴 请及时排查问题 🚨！！！
